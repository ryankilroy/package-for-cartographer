#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")

#@ data.values.image or assert.fail("missing 'image' value")
#@ data.values.released_at or assert.fail("missing 'released_at' value")
#@ data.values.version or assert.fail("missing 'version' value")
---
apiVersion: data.packaging.carvel.dev/v1alpha1
kind: Package
metadata:
  name: #@ data.values.name + '.' + data.values.version
spec:
  refName: #@ data.values.name
  version: #@ data.values.version
  releaseNotes: #@ "https://github.com/vmware-tanzu/package-for-cartographer/releases/tag/" + data.values.version
  releasedAt: #@ data.values.released_at
  valuesSchema:
    openAPIv3:
      title: #@ data.values.name + '.' + data.values.version + ' values schema'
      properties:
        ca_cert_data:
          type: string
          description: "Optional: PEM Encoded certificate data for image registries with private CA."
          default: ""
        excluded_components:
          type: array
          items:
            type: string
          default: []
          description: "Optional: List of components to exclude from installation (e.g. [conventions])"
        aws_iam_role_arn:
          type: string
          description: "Optional: Arn role that has access to pull images from ECR container registry"
          default: ""
        cartographer:
          type: object
          properties:
            concurrency:
              type: object
              properties:
                max_workloads:
                  type: integer
                  description: "Optional: maximum number of Workloads to process concurrently."
                  default: 2
                max_deliveries:
                  type: integer
                  description: "Optional: maximum number of Deliverables to process concurrently."
                  default: 2
                max_runnables:
                  type: integer
                  description: "Optional: maximum number of Runnables to process concurrently."
                  default: 2
            resources:
              type: object
              properties:
                limits:
                  type: object
                  properties:
                    cpu:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                      description: "Optional: maximum amount of cpu resources to allow the controller to use"
                      default: 1000m
                    memory:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                      description: "Optional: maximum amount of memory to allow the controller to use"
                      default: 128Mi
                requests:
                  type: object
                  properties:
                    cpu:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                      description: "Optional: minimum amount of cpu to reserve"
                      default: 250m
                    memory:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                      description: "Optional: minimum amount of memory to reserve"
                      default: 128Mi
        conventions:
          type: object
          properties:
            resources:
              type: object
              properties:
                limits:
                  type: object
                  properties:
                    cpu:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                      description: "Optional: maximum amount of cpu resources to allow the controller to use"
                      default: 1000m
                    memory:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                      description: "Optional: maximum amount of memory to allow the controller to use"
                      default: 128Mi
                requests:
                  type: object
                  properties:
                    cpu:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                      description: "Optional: minimum amount of cpu to reserve"
                      default: 250m
                    memory:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                      description: "Optional: minimum amount of memory to reserve"
                      default: 128Mi
  template:
    spec:
      fetch:
        - imgpkgBundle:
            image: #@ data.values.image
      template:
        - ytt:
            ignoreUnknownComments: true
            paths:
              - 'config'
        - kbld:
            paths:
              - '.imgpkg/images.yml'
              - '-'
      deploy:
        - kapp: {}

---
apiVersion: data.packaging.carvel.dev/v1alpha1
kind: PackageMetadata
metadata:
  name: #@ data.values.name
  annotations:
    kapp.k14s.io/change-group: "carto.run/meta"
spec:
  displayName: Cartographer
  providerName: VMware
  shortDescription: Kubernetes native Supply Chain Choreographer.
  supportDescription: https://github.com/vmware-tanzu/cartographer

  longDescription: |-
    Cartographer is a Kubernetes native Choreographer. It allows users to
    configure K8s resources into re-usable Supply Chains that can be used to
    define all of the stages that an Application Workload must go through to
    get to an environment. Requires cert-manager to be installed.

  maintainers:
    - name: VMware

  iconSVGBase64: |-
    PHN2ZyB3aWR0aD0iMTAwIiBoZWlnaHQ9IjEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj48cGF0aCBkPSJNIDEwIDEwIEggOTAgViA5MCBIIDEwIEwgMTAgMTAiLz48L3N2Zz4K

---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: #@ data.values.name + "." + data.values.version
  annotations:
    kapp.k14s.io/change-group: "carto.run/install"
    kapp.k14s.io/change-rule: "upsert after upserting carto.run/meta"
spec:
  serviceAccountName: default
  packageRef:
    refName: #@ data.values.name
    versionSelection:
      constraints: #@ data.values.version
      prereleases:
        identifiers:
          - 'dev'
          - 'rc'
          - 'build'
